import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * This program inputs an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author NYJA GOWDA date :- 2/15/2021
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int titlePlace = getChildElement(channel, "title");
        int linkIndex = getChildElement(channel, "link");
        int dscpnIndex = getChildElement(channel, "description");
        int itemPlace = getChildElement(channel, "item");
        int numOfItems = channel.numberOfChildren();
        //opening all the tags for html doc
        out.println("<!DOCTYPE html>");
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

        //checking if title name is empty
        if (channel.child(titlePlace).numberOfChildren() != 0) {
            out.println(channel.child(titlePlace).child(0).label());
        } else {
            out.println("No Title!");
        }
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");

        //if title has no name then no title is output
        if (channel.child(titlePlace).numberOfChildren() != 0) {
            out.println("<h1>");
            out.println("<a href=");
            out.println(
                    "\"" + channel.child(linkIndex).child(0).label() + "\">");
            out.println(channel.child(titlePlace).child(0).label());
            out.println("</a>");
            out.println("</h1>");
        } else {
            out.println("<h1>");
            out.println("<a href=");
            out.println(
                    "\"" + channel.child(linkIndex).child(0).label() + "\">");
            out.println("No Title!");
            out.println("</a>");
            out.println("</h1>");
        }
        out.println("<p>");

        //checking if description tag has no children
        if (channel.child(dscpnIndex).numberOfChildren() != 0) {
            out.println(channel.child(dscpnIndex).child(0).label() + "</p>");

        } else {
            out.println("No Description!" + "</p>");
        }
        //table output begins
        out.println("<table border=\"1\">" + "\n<tr>");

        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
        //while loop used to output all the items in the rss link

        while ((itemPlace != -1) && (itemPlace < numOfItems)) {
            XMLTree newItem = channel.child(itemPlace);
            if (newItem.label().equals("item")) {
                out.println("<tr>");
                out.println("<td>");
                processItem(newItem, out);
            }
            itemPlace++;
        }

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        //closing all tags for html doc
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of the {@code XMLTree} matching the
     *         given tag or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of the {@code XMLTree} matching the
     *   given tag or -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = 0;
        int index = -1;

        while (index < 0 && i < xml.numberOfChildren()) {
            if (xml.child(i).isTag()) {
                //checking tag name for the parameter
                if (tag.equals(xml.child(i).label())) {
                    index = i;
                }
            }
            i++;
        }

        return index;
    }

    /**
     * Processes one news item and outputs the title, or the description if the
     * title is not present, and the link (if available) with appropriate
     * labels.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures out.content = #out.content * [the title (or description) and
     *          link]
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int dateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");
        int titlePlace = getChildElement(item, "title");
        int descIndex = getChildElement(item, "description");
        int linkIndex = getChildElement(item, "link");

        if (dateIndex != (-1)) {
            out.println(item.child(dateIndex).child(0).label());
        } else {
            out.println("Empty Date ");
        }
        out.println("</td>");
        out.println("<td>");
        //checking that source exists
        if (sourceIndex != (-1)) {
            //outputting the url which is an attribute of the tag
            out.println("<a href= \""
                    + item.child(sourceIndex).attributeValue("url") + "\"</a>");
            //checking if source's child node is empty or not
            if (item.child(sourceIndex).numberOfChildren() != 0) {
                out.println(item.child(sourceIndex).child(0).label());
            } else {
                out.println("No Source Name!");
            }

        } else {
            out.println("No source!");
        }
        out.println("</td>");
        out.println("<td>");
        //if no title then description is output
        if (item.child(titlePlace).numberOfChildren() == 0) {

            if (item.child(descIndex).numberOfChildren() == 0) {
                //if description child node also empty then no title printed

                out.print("<a href =\"");

                if (linkIndex != (-1)) { //if link exists then its child node will
                    out.println(
                            item.child(linkIndex).child(0).label() + "\" </a>");
                }
                out.println("Empty Title!");
                out.println("</td>");
            } else { //used to print description with link if title empty

                out.print("<a href =\"");

                if (linkIndex != (-1)) {
                    out.println(
                            item.child(linkIndex).child(0).label() + "\" </a>");
                }
                out.println(item.child(descIndex).child(0).label());
                out.println("</td>");
            }
        } else {
            //here title child node is not empty so title name with link printed
            out.print("<a href =\"");

            if (linkIndex != (-1)) {
                out.println(item.child(linkIndex).child(0).label() + "\" </a>");
            }
            out.println(item.child(titlePlace).child(0).label());
            out.println("</td>");
        }
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {

        SimpleReader in = new SimpleReader1L();
        SimpleWriter outcons = new SimpleWriter1L();
        outcons.print("Enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);
        //checking for all rss requirements
        if ((!xml.label().equals("rss")) && (xml.hasAttribute("version"))
                && (Double.parseDouble(xml.attributeValue("version")) == 2.0)) {
            outcons.println(
                    "Error! Please enter the URL of an RSS 2.0 news feed!");
        } else {
            outcons.print("Enter a file name with html extension:- ");
            String fileName = in.nextLine();
            SimpleWriter out = new SimpleWriter1L(fileName);
            XMLTree channel = xml.child(0);
            outputHeader(channel, out);
            outputFooter(out);
            out.close();
        }

        in.close();
        outcons.close();
    }

}
